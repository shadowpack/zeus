'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18033
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18033.
'
Namespace internalFunction
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="internalFunctionBinding", [Namespace]:="urn:internalFunction")>  _
    Partial Public Class internalFunction
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private AliveStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private checkAddOnsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getIdUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private checkPrivilegeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private newMoneyAcountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getModulesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private deletePrivilegeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private newUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private modUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private searchUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private newPagoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.Cloud_SAYC.My.MySettings.Default.Cloud_SAYC_internalFunction_internalFunction
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event AliveStatusCompleted As AliveStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event checkAddOnsCompleted As checkAddOnsCompletedEventHandler
        
        '''<remarks/>
        Public Event getIdUserCompleted As getIdUserCompletedEventHandler
        
        '''<remarks/>
        Public Event checkPrivilegeCompleted As checkPrivilegeCompletedEventHandler
        
        '''<remarks/>
        Public Event newMoneyAcountCompleted As newMoneyAcountCompletedEventHandler
        
        '''<remarks/>
        Public Event getModulesCompleted As getModulesCompletedEventHandler
        
        '''<remarks/>
        Public Event deletePrivilegeCompleted As deletePrivilegeCompletedEventHandler
        
        '''<remarks/>
        Public Event newUserCompleted As newUserCompletedEventHandler
        
        '''<remarks/>
        Public Event modUserCompleted As modUserCompletedEventHandler
        
        '''<remarks/>
        Public Event searchUserCompleted As searchUserCompletedEventHandler
        
        '''<remarks/>
        Public Event getUserCompleted As getUserCompletedEventHandler
        
        '''<remarks/>
        Public Event newPagoCompleted As newPagoCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:internalFunction#AliveStatus", RequestNamespace:="urn:internalFunction", ResponseNamespace:="urn:internalFunction")>  _
        Public Function AliveStatus(ByVal db As String, ByVal user As String, ByVal pass As String, ByVal token As String) As <System.Xml.Serialization.SoapElementAttribute("return")> Boolean
            Dim results() As Object = Me.Invoke("AliveStatus", New Object() {db, user, pass, token})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AliveStatusAsync(ByVal db As String, ByVal user As String, ByVal pass As String, ByVal token As String)
            Me.AliveStatusAsync(db, user, pass, token, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AliveStatusAsync(ByVal db As String, ByVal user As String, ByVal pass As String, ByVal token As String, ByVal userState As Object)
            If (Me.AliveStatusOperationCompleted Is Nothing) Then
                Me.AliveStatusOperationCompleted = AddressOf Me.OnAliveStatusOperationCompleted
            End If
            Me.InvokeAsync("AliveStatus", New Object() {db, user, pass, token}, Me.AliveStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnAliveStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.AliveStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AliveStatusCompleted(Me, New AliveStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:internalFunction#logUser", RequestNamespace:="urn:internalFunction", ResponseNamespace:="urn:internalFunction")>  _
        Public Function checkAddOns(ByVal id_empresa As String, ByVal id_user As String, ByVal db_target As String, ByVal db_user As String, ByVal db_pass As String) As <System.Xml.Serialization.SoapElementAttribute("return")> String
            Dim results() As Object = Me.Invoke("checkAddOns", New Object() {id_empresa, id_user, db_target, db_user, db_pass})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub checkAddOnsAsync(ByVal id_empresa As String, ByVal id_user As String, ByVal db_target As String, ByVal db_user As String, ByVal db_pass As String)
            Me.checkAddOnsAsync(id_empresa, id_user, db_target, db_user, db_pass, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub checkAddOnsAsync(ByVal id_empresa As String, ByVal id_user As String, ByVal db_target As String, ByVal db_user As String, ByVal db_pass As String, ByVal userState As Object)
            If (Me.checkAddOnsOperationCompleted Is Nothing) Then
                Me.checkAddOnsOperationCompleted = AddressOf Me.OncheckAddOnsOperationCompleted
            End If
            Me.InvokeAsync("checkAddOns", New Object() {id_empresa, id_user, db_target, db_user, db_pass}, Me.checkAddOnsOperationCompleted, userState)
        End Sub
        
        Private Sub OncheckAddOnsOperationCompleted(ByVal arg As Object)
            If (Not (Me.checkAddOnsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent checkAddOnsCompleted(Me, New checkAddOnsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:internalFunction#getIdUser", RequestNamespace:="urn:internalFunction", ResponseNamespace:="urn:internalFunction")>  _
        Public Function getIdUser(ByVal db As String, ByVal user As String, ByVal pass As String, ByVal token As String) As <System.Xml.Serialization.SoapElementAttribute("return")> String
            Dim results() As Object = Me.Invoke("getIdUser", New Object() {db, user, pass, token})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getIdUserAsync(ByVal db As String, ByVal user As String, ByVal pass As String, ByVal token As String)
            Me.getIdUserAsync(db, user, pass, token, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getIdUserAsync(ByVal db As String, ByVal user As String, ByVal pass As String, ByVal token As String, ByVal userState As Object)
            If (Me.getIdUserOperationCompleted Is Nothing) Then
                Me.getIdUserOperationCompleted = AddressOf Me.OngetIdUserOperationCompleted
            End If
            Me.InvokeAsync("getIdUser", New Object() {db, user, pass, token}, Me.getIdUserOperationCompleted, userState)
        End Sub
        
        Private Sub OngetIdUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.getIdUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getIdUserCompleted(Me, New getIdUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:internalFunction#getIdUser", RequestNamespace:="urn:internalFunction", ResponseNamespace:="urn:internalFunction")>  _
        Public Function checkPrivilege(ByVal db As String, ByVal user As String, ByVal pass As String, ByVal token As String, ByVal privilege As String) As <System.Xml.Serialization.SoapElementAttribute("return")> String
            Dim results() As Object = Me.Invoke("checkPrivilege", New Object() {db, user, pass, token, privilege})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub checkPrivilegeAsync(ByVal db As String, ByVal user As String, ByVal pass As String, ByVal token As String, ByVal privilege As String)
            Me.checkPrivilegeAsync(db, user, pass, token, privilege, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub checkPrivilegeAsync(ByVal db As String, ByVal user As String, ByVal pass As String, ByVal token As String, ByVal privilege As String, ByVal userState As Object)
            If (Me.checkPrivilegeOperationCompleted Is Nothing) Then
                Me.checkPrivilegeOperationCompleted = AddressOf Me.OncheckPrivilegeOperationCompleted
            End If
            Me.InvokeAsync("checkPrivilege", New Object() {db, user, pass, token, privilege}, Me.checkPrivilegeOperationCompleted, userState)
        End Sub
        
        Private Sub OncheckPrivilegeOperationCompleted(ByVal arg As Object)
            If (Not (Me.checkPrivilegeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent checkPrivilegeCompleted(Me, New checkPrivilegeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:internalFunction#getIdUser", RequestNamespace:="urn:internalFunction", ResponseNamespace:="urn:internalFunction")>  _
        Public Function newMoneyAcount(ByVal db As String, ByVal user As String, ByVal pass As String, ByVal token As String, ByVal name As String) As <System.Xml.Serialization.SoapElementAttribute("return")> String
            Dim results() As Object = Me.Invoke("newMoneyAcount", New Object() {db, user, pass, token, name})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub newMoneyAcountAsync(ByVal db As String, ByVal user As String, ByVal pass As String, ByVal token As String, ByVal name As String)
            Me.newMoneyAcountAsync(db, user, pass, token, name, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub newMoneyAcountAsync(ByVal db As String, ByVal user As String, ByVal pass As String, ByVal token As String, ByVal name As String, ByVal userState As Object)
            If (Me.newMoneyAcountOperationCompleted Is Nothing) Then
                Me.newMoneyAcountOperationCompleted = AddressOf Me.OnnewMoneyAcountOperationCompleted
            End If
            Me.InvokeAsync("newMoneyAcount", New Object() {db, user, pass, token, name}, Me.newMoneyAcountOperationCompleted, userState)
        End Sub
        
        Private Sub OnnewMoneyAcountOperationCompleted(ByVal arg As Object)
            If (Not (Me.newMoneyAcountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent newMoneyAcountCompleted(Me, New newMoneyAcountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:internalFunction#getIdUser", RequestNamespace:="urn:internalFunction", ResponseNamespace:="urn:internalFunction")>  _
        Public Function getModules(ByVal db As String, ByVal user As String, ByVal pass As String, ByVal token As String, ByVal idempre As String) As <System.Xml.Serialization.SoapElementAttribute("return")> String
            Dim results() As Object = Me.Invoke("getModules", New Object() {db, user, pass, token, idempre})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getModulesAsync(ByVal db As String, ByVal user As String, ByVal pass As String, ByVal token As String, ByVal idempre As String)
            Me.getModulesAsync(db, user, pass, token, idempre, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getModulesAsync(ByVal db As String, ByVal user As String, ByVal pass As String, ByVal token As String, ByVal idempre As String, ByVal userState As Object)
            If (Me.getModulesOperationCompleted Is Nothing) Then
                Me.getModulesOperationCompleted = AddressOf Me.OngetModulesOperationCompleted
            End If
            Me.InvokeAsync("getModules", New Object() {db, user, pass, token, idempre}, Me.getModulesOperationCompleted, userState)
        End Sub
        
        Private Sub OngetModulesOperationCompleted(ByVal arg As Object)
            If (Not (Me.getModulesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getModulesCompleted(Me, New getModulesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:internalFunction#getIdUser", RequestNamespace:="urn:internalFunction", ResponseNamespace:="urn:internalFunction")>  _
        Public Function deletePrivilege(ByVal db As String, ByVal user As String, ByVal pass As String, ByVal token As String, ByVal idprivi As String, ByVal idempresa As String) As <System.Xml.Serialization.SoapElementAttribute("return")> String
            Dim results() As Object = Me.Invoke("deletePrivilege", New Object() {db, user, pass, token, idprivi, idempresa})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub deletePrivilegeAsync(ByVal db As String, ByVal user As String, ByVal pass As String, ByVal token As String, ByVal idprivi As String, ByVal idempresa As String)
            Me.deletePrivilegeAsync(db, user, pass, token, idprivi, idempresa, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub deletePrivilegeAsync(ByVal db As String, ByVal user As String, ByVal pass As String, ByVal token As String, ByVal idprivi As String, ByVal idempresa As String, ByVal userState As Object)
            If (Me.deletePrivilegeOperationCompleted Is Nothing) Then
                Me.deletePrivilegeOperationCompleted = AddressOf Me.OndeletePrivilegeOperationCompleted
            End If
            Me.InvokeAsync("deletePrivilege", New Object() {db, user, pass, token, idprivi, idempresa}, Me.deletePrivilegeOperationCompleted, userState)
        End Sub
        
        Private Sub OndeletePrivilegeOperationCompleted(ByVal arg As Object)
            If (Not (Me.deletePrivilegeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent deletePrivilegeCompleted(Me, New deletePrivilegeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:internalFunction#getIdUser", RequestNamespace:="urn:internalFunction", ResponseNamespace:="urn:internalFunction")>  _
        Public Function newUser(ByVal db As String, ByVal user As String, ByVal pass As String, ByVal token As String, ByVal name As String, ByVal rut As String, ByVal direccion As String, ByVal telefonoFijo As String, ByVal telefonoMovil As String, ByVal id As String, ByVal photo As String, ByVal empresa As String) As <System.Xml.Serialization.SoapElementAttribute("return")> String
            Dim results() As Object = Me.Invoke("newUser", New Object() {db, user, pass, token, name, rut, direccion, telefonoFijo, telefonoMovil, id, photo, empresa})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub newUserAsync(ByVal db As String, ByVal user As String, ByVal pass As String, ByVal token As String, ByVal name As String, ByVal rut As String, ByVal direccion As String, ByVal telefonoFijo As String, ByVal telefonoMovil As String, ByVal id As String, ByVal photo As String, ByVal empresa As String)
            Me.newUserAsync(db, user, pass, token, name, rut, direccion, telefonoFijo, telefonoMovil, id, photo, empresa, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub newUserAsync(ByVal db As String, ByVal user As String, ByVal pass As String, ByVal token As String, ByVal name As String, ByVal rut As String, ByVal direccion As String, ByVal telefonoFijo As String, ByVal telefonoMovil As String, ByVal id As String, ByVal photo As String, ByVal empresa As String, ByVal userState As Object)
            If (Me.newUserOperationCompleted Is Nothing) Then
                Me.newUserOperationCompleted = AddressOf Me.OnnewUserOperationCompleted
            End If
            Me.InvokeAsync("newUser", New Object() {db, user, pass, token, name, rut, direccion, telefonoFijo, telefonoMovil, id, photo, empresa}, Me.newUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnnewUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.newUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent newUserCompleted(Me, New newUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:internalFunction#modUser", RequestNamespace:="urn:internalFunction", ResponseNamespace:="urn:internalFunction")>  _
        Public Function modUser(ByVal db As String, ByVal user As String, ByVal pass As String, ByVal token As String, ByVal name As String, ByVal rut As String, ByVal direccion As String, ByVal telefonoFijo As String, ByVal telefonoMovil As String, ByVal id As String, ByVal photo As String, ByVal empresa As String) As <System.Xml.Serialization.SoapElementAttribute("return")> String
            Dim results() As Object = Me.Invoke("modUser", New Object() {db, user, pass, token, name, rut, direccion, telefonoFijo, telefonoMovil, id, photo, empresa})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub modUserAsync(ByVal db As String, ByVal user As String, ByVal pass As String, ByVal token As String, ByVal name As String, ByVal rut As String, ByVal direccion As String, ByVal telefonoFijo As String, ByVal telefonoMovil As String, ByVal id As String, ByVal photo As String, ByVal empresa As String)
            Me.modUserAsync(db, user, pass, token, name, rut, direccion, telefonoFijo, telefonoMovil, id, photo, empresa, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub modUserAsync(ByVal db As String, ByVal user As String, ByVal pass As String, ByVal token As String, ByVal name As String, ByVal rut As String, ByVal direccion As String, ByVal telefonoFijo As String, ByVal telefonoMovil As String, ByVal id As String, ByVal photo As String, ByVal empresa As String, ByVal userState As Object)
            If (Me.modUserOperationCompleted Is Nothing) Then
                Me.modUserOperationCompleted = AddressOf Me.OnmodUserOperationCompleted
            End If
            Me.InvokeAsync("modUser", New Object() {db, user, pass, token, name, rut, direccion, telefonoFijo, telefonoMovil, id, photo, empresa}, Me.modUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnmodUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.modUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent modUserCompleted(Me, New modUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:internalFunction#searchUser", RequestNamespace:="urn:internalFunction", ResponseNamespace:="urn:internalFunction")>  _
        Public Function searchUser(ByVal db As String, ByVal user As String, ByVal pass As String, ByVal token As String, ByVal rut As String) As <System.Xml.Serialization.SoapElementAttribute("return")> String
            Dim results() As Object = Me.Invoke("searchUser", New Object() {db, user, pass, token, rut})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub searchUserAsync(ByVal db As String, ByVal user As String, ByVal pass As String, ByVal token As String, ByVal rut As String)
            Me.searchUserAsync(db, user, pass, token, rut, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub searchUserAsync(ByVal db As String, ByVal user As String, ByVal pass As String, ByVal token As String, ByVal rut As String, ByVal userState As Object)
            If (Me.searchUserOperationCompleted Is Nothing) Then
                Me.searchUserOperationCompleted = AddressOf Me.OnsearchUserOperationCompleted
            End If
            Me.InvokeAsync("searchUser", New Object() {db, user, pass, token, rut}, Me.searchUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnsearchUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.searchUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent searchUserCompleted(Me, New searchUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:internalFunction#modUser", RequestNamespace:="urn:internalFunction", ResponseNamespace:="urn:internalFunction")>  _
        Public Function getUser(ByVal db As String, ByVal user As String, ByVal pass As String, ByVal token As String, ByVal empresa As String) As <System.Xml.Serialization.SoapElementAttribute("return")> String
            Dim results() As Object = Me.Invoke("getUser", New Object() {db, user, pass, token, empresa})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getUserAsync(ByVal db As String, ByVal user As String, ByVal pass As String, ByVal token As String, ByVal empresa As String)
            Me.getUserAsync(db, user, pass, token, empresa, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getUserAsync(ByVal db As String, ByVal user As String, ByVal pass As String, ByVal token As String, ByVal empresa As String, ByVal userState As Object)
            If (Me.getUserOperationCompleted Is Nothing) Then
                Me.getUserOperationCompleted = AddressOf Me.OngetUserOperationCompleted
            End If
            Me.InvokeAsync("getUser", New Object() {db, user, pass, token, empresa}, Me.getUserOperationCompleted, userState)
        End Sub
        
        Private Sub OngetUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.getUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getUserCompleted(Me, New getUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:internalFunction#modUser", RequestNamespace:="urn:internalFunction", ResponseNamespace:="urn:internalFunction")>  _
        Public Function newPago(ByVal db As String, ByVal user As String, ByVal pass As String, ByVal token As String, ByVal name As String, ByVal valor As String, ByVal cuenta_cc As String, ByVal recurrencia As String, ByVal credito As String, ByVal days As String, ByVal cuota As String, ByVal users As String, ByVal account As String, ByVal licencia As String) As <System.Xml.Serialization.SoapElementAttribute("return")> String
            Dim results() As Object = Me.Invoke("newPago", New Object() {db, user, pass, token, name, valor, cuenta_cc, recurrencia, credito, days, cuota, users, account, licencia})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub newPagoAsync(ByVal db As String, ByVal user As String, ByVal pass As String, ByVal token As String, ByVal name As String, ByVal valor As String, ByVal cuenta_cc As String, ByVal recurrencia As String, ByVal credito As String, ByVal days As String, ByVal cuota As String, ByVal users As String, ByVal account As String, ByVal licencia As String)
            Me.newPagoAsync(db, user, pass, token, name, valor, cuenta_cc, recurrencia, credito, days, cuota, users, account, licencia, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub newPagoAsync(ByVal db As String, ByVal user As String, ByVal pass As String, ByVal token As String, ByVal name As String, ByVal valor As String, ByVal cuenta_cc As String, ByVal recurrencia As String, ByVal credito As String, ByVal days As String, ByVal cuota As String, ByVal users As String, ByVal account As String, ByVal licencia As String, ByVal userState As Object)
            If (Me.newPagoOperationCompleted Is Nothing) Then
                Me.newPagoOperationCompleted = AddressOf Me.OnnewPagoOperationCompleted
            End If
            Me.InvokeAsync("newPago", New Object() {db, user, pass, token, name, valor, cuenta_cc, recurrencia, credito, days, cuota, users, account, licencia}, Me.newPagoOperationCompleted, userState)
        End Sub
        
        Private Sub OnnewPagoOperationCompleted(ByVal arg As Object)
            If (Not (Me.newPagoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent newPagoCompleted(Me, New newPagoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub AliveStatusCompletedEventHandler(ByVal sender As Object, ByVal e As AliveStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AliveStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub checkAddOnsCompletedEventHandler(ByVal sender As Object, ByVal e As checkAddOnsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class checkAddOnsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub getIdUserCompletedEventHandler(ByVal sender As Object, ByVal e As getIdUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getIdUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub checkPrivilegeCompletedEventHandler(ByVal sender As Object, ByVal e As checkPrivilegeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class checkPrivilegeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub newMoneyAcountCompletedEventHandler(ByVal sender As Object, ByVal e As newMoneyAcountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class newMoneyAcountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub getModulesCompletedEventHandler(ByVal sender As Object, ByVal e As getModulesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getModulesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub deletePrivilegeCompletedEventHandler(ByVal sender As Object, ByVal e As deletePrivilegeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class deletePrivilegeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub newUserCompletedEventHandler(ByVal sender As Object, ByVal e As newUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class newUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub modUserCompletedEventHandler(ByVal sender As Object, ByVal e As modUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class modUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub searchUserCompletedEventHandler(ByVal sender As Object, ByVal e As searchUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class searchUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub getUserCompletedEventHandler(ByVal sender As Object, ByVal e As getUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub newPagoCompletedEventHandler(ByVal sender As Object, ByVal e As newPagoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class newPagoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
