'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.17929
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.17929.
'
Namespace initFunction
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="initFunctionBinding", [Namespace]:="urn:initFunction")>  _
    Partial Public Class initFunction
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private isAliveOperationCompleted As System.Threading.SendOrPostCallback
        
        Private versionNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private newVersionCheckOperationCompleted As System.Threading.SendOrPostCallback
        
        Private requestUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private logUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.Cloud_SAYC.My.MySettings.Default.Cloud_SAYC_initFunction_initFunction
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event isAliveCompleted As isAliveCompletedEventHandler
        
        '''<remarks/>
        Public Event versionNameCompleted As versionNameCompletedEventHandler
        
        '''<remarks/>
        Public Event newVersionCheckCompleted As newVersionCheckCompletedEventHandler
        
        '''<remarks/>
        Public Event requestUserCompleted As requestUserCompletedEventHandler
        
        '''<remarks/>
        Public Event logUserCompleted As logUserCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:initFunction#query", RequestNamespace:="urn:initFunction", ResponseNamespace:="urn:initFunction")>  _
        Public Function isAlive() As <System.Xml.Serialization.SoapElementAttribute("return")> Boolean
            Dim results() As Object = Me.Invoke("isAlive", New Object(-1) {})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub isAliveAsync()
            Me.isAliveAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub isAliveAsync(ByVal userState As Object)
            If (Me.isAliveOperationCompleted Is Nothing) Then
                Me.isAliveOperationCompleted = AddressOf Me.OnisAliveOperationCompleted
            End If
            Me.InvokeAsync("isAlive", New Object(-1) {}, Me.isAliveOperationCompleted, userState)
        End Sub
        
        Private Sub OnisAliveOperationCompleted(ByVal arg As Object)
            If (Not (Me.isAliveCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent isAliveCompleted(Me, New isAliveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:initFunction#versionName", RequestNamespace:="urn:initFunction", ResponseNamespace:="urn:initFunction")>  _
        Public Function versionName(ByVal version As String) As <System.Xml.Serialization.SoapElementAttribute("return")> String
            Dim results() As Object = Me.Invoke("versionName", New Object() {version})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub versionNameAsync(ByVal version As String)
            Me.versionNameAsync(version, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub versionNameAsync(ByVal version As String, ByVal userState As Object)
            If (Me.versionNameOperationCompleted Is Nothing) Then
                Me.versionNameOperationCompleted = AddressOf Me.OnversionNameOperationCompleted
            End If
            Me.InvokeAsync("versionName", New Object() {version}, Me.versionNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnversionNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.versionNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent versionNameCompleted(Me, New versionNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:initFunction#query", RequestNamespace:="urn:initFunction", ResponseNamespace:="urn:initFunction")>  _
        Public Function newVersionCheck() As <System.Xml.Serialization.SoapElementAttribute("return")> String
            Dim results() As Object = Me.Invoke("newVersionCheck", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub newVersionCheckAsync()
            Me.newVersionCheckAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub newVersionCheckAsync(ByVal userState As Object)
            If (Me.newVersionCheckOperationCompleted Is Nothing) Then
                Me.newVersionCheckOperationCompleted = AddressOf Me.OnnewVersionCheckOperationCompleted
            End If
            Me.InvokeAsync("newVersionCheck", New Object(-1) {}, Me.newVersionCheckOperationCompleted, userState)
        End Sub
        
        Private Sub OnnewVersionCheckOperationCompleted(ByVal arg As Object)
            If (Not (Me.newVersionCheckCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent newVersionCheckCompleted(Me, New newVersionCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:initFunction#RequestUser", RequestNamespace:="urn:initFunction", ResponseNamespace:="urn:initFunction")>  _
        Public Function requestUser(ByVal id As String) As <System.Xml.Serialization.SoapElementAttribute("return")> String
            Dim results() As Object = Me.Invoke("requestUser", New Object() {id})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub requestUserAsync(ByVal id As String)
            Me.requestUserAsync(id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub requestUserAsync(ByVal id As String, ByVal userState As Object)
            If (Me.requestUserOperationCompleted Is Nothing) Then
                Me.requestUserOperationCompleted = AddressOf Me.OnrequestUserOperationCompleted
            End If
            Me.InvokeAsync("requestUser", New Object() {id}, Me.requestUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnrequestUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.requestUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent requestUserCompleted(Me, New requestUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:initFunction#logUser", RequestNamespace:="urn:initFunction", ResponseNamespace:="urn:initFunction")>  _
        Public Function logUser(ByVal id As String, ByVal pass As String) As <System.Xml.Serialization.SoapElementAttribute("return")> String
            Dim results() As Object = Me.Invoke("logUser", New Object() {id, pass})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub logUserAsync(ByVal id As String, ByVal pass As String)
            Me.logUserAsync(id, pass, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub logUserAsync(ByVal id As String, ByVal pass As String, ByVal userState As Object)
            If (Me.logUserOperationCompleted Is Nothing) Then
                Me.logUserOperationCompleted = AddressOf Me.OnlogUserOperationCompleted
            End If
            Me.InvokeAsync("logUser", New Object() {id, pass}, Me.logUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnlogUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.logUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent logUserCompleted(Me, New logUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub isAliveCompletedEventHandler(ByVal sender As Object, ByVal e As isAliveCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class isAliveCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub versionNameCompletedEventHandler(ByVal sender As Object, ByVal e As versionNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class versionNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub newVersionCheckCompletedEventHandler(ByVal sender As Object, ByVal e As newVersionCheckCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class newVersionCheckCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub requestUserCompletedEventHandler(ByVal sender As Object, ByVal e As requestUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class requestUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")>  _
    Public Delegate Sub logUserCompletedEventHandler(ByVal sender As Object, ByVal e As logUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class logUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
